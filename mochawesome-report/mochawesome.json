{
  "stats": {
    "suites": 4,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-29T20:55:28.474Z",
    "end": "2025-07-29T20:56:09.299Z",
    "duration": 40825,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e015fabc-9fc5-454f-b0ae-815ae4262dec",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fcf9a7ec-2c68-422c-b4b0-579268d96dd5",
          "title": "Login",
          "fullFile": "/home/guest/Desktop/projetos/banco-api-tests/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e4ebd21a-de89-40c0-ae1f-26fa4019aaef",
              "title": "POST/login",
              "fullFile": "/home/guest/Desktop/projetos/banco-api-tests/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com um token em string quando usar credenciais validas",
                  "fullTitle": "Login POST/login Deve retornar 200 com um token em string quando usar credenciais validas",
                  "timedOut": false,
                  "duration": 8060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(process.env.BASE_URL)\n                    .post('/login')\n                    .set('Content-Type', 'application/json')\n                    .send({\n                        'username': 'julio.lima',\n                        'senha':  '123456'\n                     }); \n                    \n                    expect(respostaLogin.status).to.equal(200);\n                    expect(respostaLogin.body.token).to.be.a('string');",
                  "err": {},
                  "uuid": "d49f5fa4-f6a9-4bb4-9c31-4dfd41399158",
                  "parentUUID": "e4ebd21a-de89-40c0-ae1f-26fa4019aaef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d49f5fa4-f6a9-4bb4-9c31-4dfd41399158"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8060,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "b66568ac-6a43-4eee-b661-95f4d33a8947",
          "title": "Transferencias",
          "fullFile": "/home/guest/Desktop/projetos/banco-api-tests/test/tranferencia.test.js",
          "file": "/test/tranferencia.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "566c51bc-7ae1-4547-a9a8-1e19e92362bf",
              "title": "POST /transferencias",
              "fullFile": "/home/guest/Desktop/projetos/banco-api-tests/test/tranferencia.test.js",
              "file": "/test/tranferencia.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar sucesso com 201 quando o valor for igual ou acima de 10,00",
                  "fullTitle": "Transferencias POST /transferencias Deve retornar sucesso com 201 quando o valor for igual ou acima de 10,00",
                  "timedOut": false,
                  "duration": 16634,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(process.env.BASE_URL)\n        .post('/login')\n        .set('Content-Type', 'application/json')\n        .send({\n          username: 'julio.lima',\n          senha: '123456'\n        });\n      const token = respostaLogin.body.token;\n      const resposta = await request(process.env.BASE_URL)\n        .post('/transferencias')\n        .set('Content-Type', 'application/json')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          contaOrigem: 1,\n          contaDestino: 2,\n          valor: 11,\n          token: ''\n        });\n      \n      expect(resposta.status).to.equal(201);",
                  "err": {},
                  "uuid": "5057def3-551b-42d0-866e-5a942aeb7e86",
                  "parentUUID": "566c51bc-7ae1-4547-a9a8-1e19e92362bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro com 422 quando o valor da transferência for abaixo de 10,00",
                  "fullTitle": "Transferencias POST /transferencias Deve retornar erro com 422 quando o valor da transferência for abaixo de 10,00",
                  "timedOut": false,
                  "duration": 16127,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(process.env.BASE_URL)\n        .post('/login')\n        .set('Content-Type', 'application/json')\n        .send({\n          username: 'julio.lima',\n          senha: '123456'\n        });\n      const token = respostaLogin.body.token;\n      const resposta = await request(process.env.BASE_URL)\n        .post('/transferencias')\n        .set('Content-Type', 'application/json')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          contaOrigem: 1,\n          contaDestino: 2,\n          valor: 7,\n          token: ''\n        });\n      expect(resposta.status).to.equal(422);",
                  "err": {},
                  "uuid": "2f5dd2fc-dabe-4d32-bb91-ca0d3cc825cb",
                  "parentUUID": "566c51bc-7ae1-4547-a9a8-1e19e92362bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5057def3-551b-42d0-866e-5a942aeb7e86",
                "2f5dd2fc-dabe-4d32-bb91-ca0d3cc825cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32761,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}